import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Forgot your email or username"
  String get loginForgotEmailOrUsername => "Forgot your email or username";
  /// "Invaild Username"
  String get loginInvaidUsername => "Invaild Username";
  /// "Invaild Password"
  String get loginInvaildPassword => "Invaild Password";
  /// "Your username or email"
  String get loginUsernameInputLabel => "Your username or email";
  /// "Your password"
  String get loginYourPassword => "Your password";
  /// "Sign In"
  String get loginSignIn => "Sign In";
  /// "Forgot password ?"
  String get loginForgotPassword => "Forgot password ?";
  /// "Don't have account ?"
  String get loginDontHaveAccount => "Don't have account ?";
  /// "Sign Up"
  String get loginSignUp => "Sign Up";
  /// "Sign Up now"
  String get loginSignUpNow => "Sign Up now";
  /// "Sign up sucess"
  String get signUpSignUpSuccess => "Sign up sucess";
  /// "Sign up faild"
  String get signUpSignUpFail => "Sign up faild";
  /// "Invaild email"
  String get signUpInvaildEmail => "Invaild email";
  /// "Invaild username"
  String get signUpInvaildUsername => "Invaild username";
  /// "Invaild password"
  String get signUpInvaildPassword => "Invaild password";
  /// "Email (optional)"
  String get signUpEmailInputLabel => "Email (optional)";
  /// "Username"
  String get signUpUserNameInputLabel => "Username";
  /// "Nick name"
  String get signUpNickNameInputLabel => "Nick name";
  /// "Password"
  String get signUpPasswordInputLabel => "Password";
  /// "Password not match"
  String get signUpRepassValidate => "Password not match";
  /// "Type your password again"
  String get signUpRetypePassInputLabel => "Type your password again";
  /// "SIGN UP"
  String get signUpSignUp => "SIGN UP";
  /// "Feeds"
  String get homeBottomNavigationFeeds => "Feeds";
  /// "News"
  String get homeBottomNavigationNews => "News";
  /// "Explorer"
  String get homeBottomNavigationExplorer => "Explorer";
  /// "Manager"
  String get homeBottomNavigationManager => "Manager";
  /// "Chat"
  String get homeBottomNavigationChat => "Chat";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_vi_VI extends I18n {
  const _I18n_vi_VI();

  /// "Quên tên đăng nhập hoặc email"
  @override
  String get loginForgotEmailOrUsername => "Quên tên đăng nhập hoặc email";
  /// "Tên tài khoản không hợp lệ"
  @override
  String get loginInvaidUsername => "Tên tài khoản không hợp lệ";
  /// "Mật khẩu không hợp lệ"
  @override
  String get loginInvaildPassword => "Mật khẩu không hợp lệ";
  /// "Tên đăng nhập hoặc email"
  @override
  String get loginUsernameInputLabel => "Tên đăng nhập hoặc email";
  /// "Mật khẩu"
  @override
  String get loginYourPassword => "Mật khẩu";
  /// "Đăng nhập"
  @override
  String get loginSignIn => "Đăng nhập";
  /// "Quên mật khẩu ?"
  @override
  String get loginForgotPassword => "Quên mật khẩu ?";
  /// "Không có tài khoản ?"
  @override
  String get loginDontHaveAccount => "Không có tài khoản ?";
  /// "Đăng ký"
  @override
  String get loginSignUp => "Đăng ký";
  /// "Đăng ký ngay"
  @override
  String get loginSignUpNow => "Đăng ký ngay";
  /// "Đăng ký thành công"
  @override
  String get signUpSignUpSuccess => "Đăng ký thành công";
  /// "Đăng ký thất bại"
  @override
  String get signUpSignUpFail => "Đăng ký thất bại";
  /// "Email không hợp lệ"
  @override
  String get signUpInvaildEmail => "Email không hợp lệ";
  /// "Tên đăng nhập không hợp lệ"
  @override
  String get signUpInvaildUsername => "Tên đăng nhập không hợp lệ";
  /// "Mật khẩu không hợp lệ"
  @override
  String get signUpInvaildPassword => "Mật khẩu không hợp lệ";
  /// "Email (tuỳ chọn)"
  @override
  String get signUpEmailInputLabel => "Email (tuỳ chọn)";
  /// "Tên đăng nhập"
  @override
  String get signUpUserNameInputLabel => "Tên đăng nhập";
  /// "Nick name"
  @override
  String get signUpNickNameInputLabel => "Nick name";
  /// "Mật khẩu"
  @override
  String get signUpPasswordInputLabel => "Mật khẩu";
  /// "Mật khẩu không chính xác"
  @override
  String get signUpRepassValidate => "Mật khẩu không chính xác";
  /// "Nhập lại mật khẩu"
  @override
  String get signUpRetypePassInputLabel => "Nhập lại mật khẩu";
  /// "ĐĂNG KÝ"
  @override
  String get signUpSignUp => "ĐĂNG KÝ";
  /// "Bản tin"
  @override
  String get homeBottomNavigationFeeds => "Bản tin";
  /// "Tin tức"
  @override
  String get homeBottomNavigationNews => "Tin tức";
  /// "Khám phá"
  @override
  String get homeBottomNavigationExplorer => "Khám phá";
  /// "Quản lý"
  @override
  String get homeBottomNavigationManager => "Quản lý";
  /// "Nhắn tin"
  @override
  String get homeBottomNavigationChat => "Nhắn tin";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("vi", "VI")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("vi_VI" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_vi_VI());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("vi" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_vi_VI());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}